# Welcome to Jekyll!
#
# This config file is meant for settings that affect your whole blog, values
# which you are expected to set up once and rarely edit after that. If you find
# yourself editing this file very often, consider using Jekyll's data files
# feature for the data you need to update frequently.
#
# For technical reasons, this file is *NOT* reloaded automatically when you use
# 'bundle exec jekyll serve'. If you change this file, please restart the server process.

# Site settings
# These are used to personalize your new site. If you look in the HTML files,
# you will see them accessed via {{ site.title }}, {{ site.email }}, and so on.
# You can create any custom variable you would like, and they will be accessible
# in the templates via {{ site.myvariable }}.
title: CS###/EE### Embedded Systems
email: keyi@cs.stanford.edu
course-info: >- # this means to ignore newlines until "baseurl:"
    <p>
    This is a project-based class where students will learn how to build modern connected embedded systems
    that utilize machine learning. The class briefly covers how to create embedded systems to cloud services
    and dives into details of how to do edge and cloud-based machine learning on time-series and image data.
    In the final project students are expected to produce a working system that improves the state of machine
    learning on the edge or solves a useful task by combining many different connected components.
    </p>
    <p>
    This class <b>will not</b> focus on several very import low-level aspects of embedded systems such as memory footprints,
    temperature resilience, etc.
    </p>
baseurl: "/course-website/" # the subpath of your site, e.g. /blog
url: "" # the base hostname & protocol for your site, e.g. http://example.com

footer_text:
    Website maintained by Zain Asgar and Keyi Zhang.

# Build settings
markdown: kramdown
theme: minima
# plugins:
#  - jekyll-feed

# Exclude from processing.
# The following items will not be processed, by default. Create a custom list
# to override the default setting.
# exclude:
#   - Gemfile
#   - Gemfile.lock
#   - node_modules
#   - vendor/bundle/
#   - vendor/cache/
#   - vendor/gems/
#   - vendor/ruby/

# Course schedule
weeks:
    - 
        day1: Intros, Objectives, etc. Web application design
        day1-intro: >-
            In this class we will discuss overall architecture, evolution of embedded systems and how connected devices can be used to build a complex system.
            We will also discuss basics of Javascript. What is an API and how to define it? What is serverless architecture? 
        day2: Introduction to particle.io system
        day2-intro: >-
            Understand high level IoT style architecture. Be able to build
            simple particle program&#58; Control blinking frequency of an LED based
            on events to the particle cloud. Report back measured temperature
            back to the particle cloud as events.
    -
        day1: Event processing
        day1-intro: >
             Event processing and storage. How to store and process events.
             Learn how to actually store the data and build processing pipelines to take action. 
        day2: Build a web interface for data processing
        day2-intro: >
            Build a web interface that will allow querying the temperature data and statistics. 
            Anomaly detection for temperature sensor, send notifications via text/email.
    -
        day1: Introduction to CNN
        day1-intro: >
            Introduction to convolutional neural network (CNN). We will discuss classical architectures like alexnet, mobilenet, resetnet.
            We will also introduce problems such as classification, detection, and segmentation. 
        day2: Introduction to CNN
        day2-intro: >
            Lecture continued. No Lab.
    -
        day1: Challenges with image processing on embedded systems
        day1-intro: >
            Accelerators and quantized architectures.
        day2: Fun with Raspberry Pi
        day2-intro: >
            Use a template raspberry pi camera to find classes of objects.
            Learn to train new classifiers based on transfer learning. 
    -
        day1: Introduction to LSTM based neural networks and anomaly detection
        day1-intro: >
            TBD
        day2: Text/Voice interfaces.
        day2-intro: >
            TBD
    -
        day1: TBD
        day1-intro: >
            TBD
        day2: TBD
        day2-intro: >
            TBD
    -
        day1: "Guest Lecture: Pete Warden?"
        day1-intro: >
            Building tensorflow for embedded systems.
        day2: Project help
    -   day1: "Guest Lecture: Nayeem Islam?"
        day1-intro: Challenges in building large scale embedded systems.
        day2: Project help
    -   day1: Project help
        day2: Project help
    -   day1: Project demo
        day2: Project demo

homework:
    - 
        name: Temperature anomaly detection.
    -
        name: A smart lock implementation. Rpi + Camera to detect faces and notify user. 
    -
        name: TBD
  

